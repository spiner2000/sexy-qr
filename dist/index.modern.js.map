{"version":3,"file":"index.modern.js","sources":["../src/QR8bitByte.ts","../src/QRMode.ts","../src/QRErrorCorrectLevel.ts","../src/QRRSBlock.ts","../src/QRBitBuffer.ts","../src/QRMath.ts","../src/QRPolynomial.ts","../src/QRUtil.ts","../src/QRMaskPattern.ts","../src/QRCodeModel.ts","../src/QRCodeLimitLength.ts","../src/utils.ts","../src/QRCode.ts","../src/QRSvg.ts"],"sourcesContent":["import { QRMode } from './QRMode';\r\n\r\nexport class QR8bitByte {\r\n  mode = QRMode.MODE_8BIT_BYTE;\r\n\r\n  data: string;\r\n\r\n  parsedData: (number[] | number)[] = [];\r\n\r\n  constructor(data) {\r\n    this.data = data;\r\n\r\n    // Added to support UTF-8 Characters\r\n    let i = 0;\r\n    const l = this.data.length;\r\n    for (; i < l; i++) {\r\n      const code = this.data.charCodeAt(i);\r\n\r\n      let byteArray: number[];\r\n      if (code > 0x10000) {\r\n        // prettier-ignore\r\n        byteArray = [\r\n          0xf0 | ((code & 0x1c0000) >>> 18),\r\n          0x80 | ((code & 0x3f000) >>> 12),\r\n          0x80 | ((code & 0xfc0) >>> 6),\r\n          0x80 | (code & 0x3f),\r\n        ];\r\n      } else if (code > 0x800) {\r\n        // prettier-ignore\r\n        byteArray = [\r\n          0xe0 | ((code & 0xf000) >>> 12),\r\n          0x80 | ((code & 0xfc0) >>> 6),\r\n          0x80 | (code & 0x3f),\r\n        ]\r\n      } else if (code > 0x80) {\r\n        // prettier-ignore\r\n        byteArray = [\r\n          0xc0 | ((code & 0x7c0) >>> 6),\r\n          0x80 | (code & 0x3f),\r\n        ]\r\n      } else {\r\n        byteArray = [code];\r\n      }\r\n\r\n      this.parsedData.push(byteArray);\r\n    }\r\n\r\n    this.parsedData = Array.prototype.concat.apply([], this.parsedData);\r\n\r\n    if (this.parsedData.length !== this.data.length) {\r\n      this.parsedData.unshift(191);\r\n      this.parsedData.unshift(187);\r\n      this.parsedData.unshift(239);\r\n    }\r\n  }\r\n\r\n  getLength() {\r\n    return this.parsedData.length;\r\n  }\r\n\r\n  write(buffer) {\r\n    let i = 0;\r\n    const l = this.parsedData.length;\r\n    for (; i < l; i++) {\r\n      buffer.put(this.parsedData[i], 8);\r\n    }\r\n  }\r\n}\r\n","export const QRMode = {\r\n  MODE_NUMBER: 1 << 0,\r\n  MODE_ALPHA_NUM: 1 << 1,\r\n  MODE_8BIT_BYTE: 1 << 2,\r\n  MODE_KANJI: 1 << 3,\r\n};\r\n\r\nexport type QRMode = typeof QRMode[keyof typeof QRMode];\r\n","export const QRErrorCorrectLevel = {\r\n  L: 1,\r\n  M: 0,\r\n  Q: 3,\r\n  H: 2,\r\n};\r\n\r\nexport type QRErrorCorrectLevel = typeof QRErrorCorrectLevel[keyof typeof QRErrorCorrectLevel];\r\n","import { QRErrorCorrectLevel } from './QRErrorCorrectLevel';\r\n\r\nexport class QRRSBlock {\r\n  totalCount!: number;\r\n  dataCount!: number;\r\n\r\n  constructor(totalCount, dataCount) {\r\n    this.totalCount = totalCount;\r\n    this.dataCount = dataCount;\r\n  }\r\n\r\n  static RS_BLOCK_TABLE = [\r\n    [1, 26, 19],\r\n    [1, 26, 16],\r\n    [1, 26, 13],\r\n    [1, 26, 9],\r\n    [1, 44, 34],\r\n    [1, 44, 28],\r\n    [1, 44, 22],\r\n    [1, 44, 16],\r\n    [1, 70, 55],\r\n    [1, 70, 44],\r\n    [2, 35, 17],\r\n    [2, 35, 13],\r\n    [1, 100, 80],\r\n    [2, 50, 32],\r\n    [2, 50, 24],\r\n    [4, 25, 9],\r\n    [1, 134, 108],\r\n    [2, 67, 43],\r\n    [2, 33, 15, 2, 34, 16],\r\n    [2, 33, 11, 2, 34, 12],\r\n    [2, 86, 68],\r\n    [4, 43, 27],\r\n    [4, 43, 19],\r\n    [4, 43, 15],\r\n    [2, 98, 78],\r\n    [4, 49, 31],\r\n    [2, 32, 14, 4, 33, 15],\r\n    [4, 39, 13, 1, 40, 14],\r\n    [2, 121, 97],\r\n    [2, 60, 38, 2, 61, 39],\r\n    [4, 40, 18, 2, 41, 19],\r\n    [4, 40, 14, 2, 41, 15],\r\n    [2, 146, 116],\r\n    [3, 58, 36, 2, 59, 37],\r\n    [4, 36, 16, 4, 37, 17],\r\n    [4, 36, 12, 4, 37, 13],\r\n    [2, 86, 68, 2, 87, 69],\r\n    [4, 69, 43, 1, 70, 44],\r\n    [6, 43, 19, 2, 44, 20],\r\n    [6, 43, 15, 2, 44, 16],\r\n    [4, 101, 81],\r\n    [1, 80, 50, 4, 81, 51],\r\n    [4, 50, 22, 4, 51, 23],\r\n    [3, 36, 12, 8, 37, 13],\r\n    [2, 116, 92, 2, 117, 93],\r\n    [6, 58, 36, 2, 59, 37],\r\n    [4, 46, 20, 6, 47, 21],\r\n    [7, 42, 14, 4, 43, 15],\r\n    [4, 133, 107],\r\n    [8, 59, 37, 1, 60, 38],\r\n    [8, 44, 20, 4, 45, 21],\r\n    [12, 33, 11, 4, 34, 12],\r\n    [3, 145, 115, 1, 146, 116],\r\n    [4, 64, 40, 5, 65, 41],\r\n    [11, 36, 16, 5, 37, 17],\r\n    [11, 36, 12, 5, 37, 13],\r\n    [5, 109, 87, 1, 110, 88],\r\n    [5, 65, 41, 5, 66, 42],\r\n    [5, 54, 24, 7, 55, 25],\r\n    [11, 36, 12],\r\n    [5, 122, 98, 1, 123, 99],\r\n    [7, 73, 45, 3, 74, 46],\r\n    [15, 43, 19, 2, 44, 20],\r\n    [3, 45, 15, 13, 46, 16],\r\n    [1, 135, 107, 5, 136, 108],\r\n    [10, 74, 46, 1, 75, 47],\r\n    [1, 50, 22, 15, 51, 23],\r\n    [2, 42, 14, 17, 43, 15],\r\n    [5, 150, 120, 1, 151, 121],\r\n    [9, 69, 43, 4, 70, 44],\r\n    [17, 50, 22, 1, 51, 23],\r\n    [2, 42, 14, 19, 43, 15],\r\n    [3, 141, 113, 4, 142, 114],\r\n    [3, 70, 44, 11, 71, 45],\r\n    [17, 47, 21, 4, 48, 22],\r\n    [9, 39, 13, 16, 40, 14],\r\n    [3, 135, 107, 5, 136, 108],\r\n    [3, 67, 41, 13, 68, 42],\r\n    [15, 54, 24, 5, 55, 25],\r\n    [15, 43, 15, 10, 44, 16],\r\n    [4, 144, 116, 4, 145, 117],\r\n    [17, 68, 42],\r\n    [17, 50, 22, 6, 51, 23],\r\n    [19, 46, 16, 6, 47, 17],\r\n    [2, 139, 111, 7, 140, 112],\r\n    [17, 74, 46],\r\n    [7, 54, 24, 16, 55, 25],\r\n    [34, 37, 13],\r\n    [4, 151, 121, 5, 152, 122],\r\n    [4, 75, 47, 14, 76, 48],\r\n    [11, 54, 24, 14, 55, 25],\r\n    [16, 45, 15, 14, 46, 16],\r\n    [6, 147, 117, 4, 148, 118],\r\n    [6, 73, 45, 14, 74, 46],\r\n    [11, 54, 24, 16, 55, 25],\r\n    [30, 46, 16, 2, 47, 17],\r\n    [8, 132, 106, 4, 133, 107],\r\n    [8, 75, 47, 13, 76, 48],\r\n    [7, 54, 24, 22, 55, 25],\r\n    [22, 45, 15, 13, 46, 16],\r\n    [10, 142, 114, 2, 143, 115],\r\n    [19, 74, 46, 4, 75, 47],\r\n    [28, 50, 22, 6, 51, 23],\r\n    [33, 46, 16, 4, 47, 17],\r\n    [8, 152, 122, 4, 153, 123],\r\n    [22, 73, 45, 3, 74, 46],\r\n    [8, 53, 23, 26, 54, 24],\r\n    [12, 45, 15, 28, 46, 16],\r\n    [3, 147, 117, 10, 148, 118],\r\n    [3, 73, 45, 23, 74, 46],\r\n    [4, 54, 24, 31, 55, 25],\r\n    [11, 45, 15, 31, 46, 16],\r\n    [7, 146, 116, 7, 147, 117],\r\n    [21, 73, 45, 7, 74, 46],\r\n    [1, 53, 23, 37, 54, 24],\r\n    [19, 45, 15, 26, 46, 16],\r\n    [5, 145, 115, 10, 146, 116],\r\n    [19, 75, 47, 10, 76, 48],\r\n    [15, 54, 24, 25, 55, 25],\r\n    [23, 45, 15, 25, 46, 16],\r\n    [13, 145, 115, 3, 146, 116],\r\n    [2, 74, 46, 29, 75, 47],\r\n    [42, 54, 24, 1, 55, 25],\r\n    [23, 45, 15, 28, 46, 16],\r\n    [17, 145, 115],\r\n    [10, 74, 46, 23, 75, 47],\r\n    [10, 54, 24, 35, 55, 25],\r\n    [19, 45, 15, 35, 46, 16],\r\n    [17, 145, 115, 1, 146, 116],\r\n    [14, 74, 46, 21, 75, 47],\r\n    [29, 54, 24, 19, 55, 25],\r\n    [11, 45, 15, 46, 46, 16],\r\n    [13, 145, 115, 6, 146, 116],\r\n    [14, 74, 46, 23, 75, 47],\r\n    [44, 54, 24, 7, 55, 25],\r\n    [59, 46, 16, 1, 47, 17],\r\n    [12, 151, 121, 7, 152, 122],\r\n    [12, 75, 47, 26, 76, 48],\r\n    [39, 54, 24, 14, 55, 25],\r\n    [22, 45, 15, 41, 46, 16],\r\n    [6, 151, 121, 14, 152, 122],\r\n    [6, 75, 47, 34, 76, 48],\r\n    [46, 54, 24, 10, 55, 25],\r\n    [2, 45, 15, 64, 46, 16],\r\n    [17, 152, 122, 4, 153, 123],\r\n    [29, 74, 46, 14, 75, 47],\r\n    [49, 54, 24, 10, 55, 25],\r\n    [24, 45, 15, 46, 46, 16],\r\n    [4, 152, 122, 18, 153, 123],\r\n    [13, 74, 46, 32, 75, 47],\r\n    [48, 54, 24, 14, 55, 25],\r\n    [42, 45, 15, 32, 46, 16],\r\n    [20, 147, 117, 4, 148, 118],\r\n    [40, 75, 47, 7, 76, 48],\r\n    [43, 54, 24, 22, 55, 25],\r\n    [10, 45, 15, 67, 46, 16],\r\n    [19, 148, 118, 6, 149, 119],\r\n    [18, 75, 47, 31, 76, 48],\r\n    [34, 54, 24, 34, 55, 25],\r\n    [20, 45, 15, 61, 46, 16],\r\n  ];\r\n\r\n  static getRSBlocks(typeNumber, errorCorrectLevel) {\r\n    const rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\r\n    if (rsBlock === undefined) {\r\n      throw new Error('bad rs block @ typeNumber:' + typeNumber + '/errorCorrectLevel:' + errorCorrectLevel);\r\n    }\r\n    const length = rsBlock.length / 3;\r\n    const list: QRRSBlock[] = [];\r\n    for (let i = 0; i < length; i++) {\r\n      const count = rsBlock[i * 3];\r\n      const totalCount = rsBlock[i * 3 + 1];\r\n      const dataCount = rsBlock[i * 3 + 2];\r\n      for (let j = 0; j < count; j++) {\r\n        list.push(new QRRSBlock(totalCount, dataCount));\r\n      }\r\n    }\r\n    return list;\r\n  }\r\n\r\n  static getRsBlockTable(typeNumber, errorCorrectLevel) {\r\n    switch (errorCorrectLevel) {\r\n      case QRErrorCorrectLevel.L:\r\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4];\r\n      case QRErrorCorrectLevel.M:\r\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\r\n      case QRErrorCorrectLevel.Q:\r\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\r\n      case QRErrorCorrectLevel.H:\r\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n}\r\n","export class QRBitBuffer {\r\n  buffer: number[] = [];\r\n\r\n  length = 0;\r\n\r\n  constructor() {}\r\n\r\n  get(index) {\r\n    const bufIndex = Math.floor(index / 8);\r\n    return ((this.buffer[bufIndex] >>> (7 - (index % 8))) & 1) === 1;\r\n  }\r\n\r\n  put(num, length) {\r\n    for (let i = 0; i < length; i++) {\r\n      this.putBit(((num >>> (length - i - 1)) & 1) === 1);\r\n    }\r\n  }\r\n\r\n  getLengthInBits() {\r\n    return this.length;\r\n  }\r\n\r\n  putBit(bit) {\r\n    const bufIndex = Math.floor(this.length / 8);\r\n    if (this.buffer.length <= bufIndex) {\r\n      this.buffer.push(0);\r\n    }\r\n    if (bit) {\r\n      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\r\n    }\r\n    this.length++;\r\n  }\r\n}\r\n","export const [EXP_TABLE, LOG_TABLE] = (() => {\r\n  const EXP_TABLE = new Array(256);\r\n  const LOG_TABLE = new Array(256);\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    EXP_TABLE[i] = 1 << i;\r\n  }\r\n  for (let i = 8; i < 256; i++) {\r\n    EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];\r\n  }\r\n  for (let i = 0; i < 255; i++) {\r\n    LOG_TABLE[EXP_TABLE[i]] = i;\r\n  }\r\n\r\n  return [EXP_TABLE, LOG_TABLE];\r\n})();\r\n\r\nexport const glog = (n) => {\r\n  if (n < 1) {\r\n    throw new Error('glog(' + n + ')');\r\n  }\r\n  return LOG_TABLE[n];\r\n};\r\n\r\nexport const gexp = (n) => {\r\n  while (n < 0) {\r\n    n += 255;\r\n  }\r\n  while (n >= 256) {\r\n    n -= 255;\r\n  }\r\n  return EXP_TABLE[n];\r\n};\r\n","import * as QRMath from './QRMath';\r\n\r\nexport class QRPolynomial {\r\n  num: number[];\r\n\r\n  constructor(num, shift) {\r\n    if (num.length === undefined) {\r\n      throw new Error(num.length + '/' + shift);\r\n    }\r\n    let offset = 0;\r\n    while (offset < num.length && num[offset] === 0) {\r\n      offset++;\r\n    }\r\n    this.num = new Array(num.length - offset + shift);\r\n    for (let i = 0; i < num.length - offset; i++) {\r\n      this.num[i] = num[i + offset];\r\n    }\r\n  }\r\n\r\n  get(index) {\r\n    return this.num[index];\r\n  }\r\n\r\n  getLength() {\r\n    return this.num.length;\r\n  }\r\n\r\n  multiply(e) {\r\n    const num = new Array(this.getLength() + e.getLength() - 1);\r\n    for (let i = 0; i < this.getLength(); i++) {\r\n      for (let j = 0; j < e.getLength(); j++) {\r\n        num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));\r\n      }\r\n    }\r\n    return new QRPolynomial(num, 0);\r\n  }\r\n\r\n  mod(e) {\r\n    if (this.getLength() - e.getLength() < 0) {\r\n      return this;\r\n    }\r\n    const ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0));\r\n    const num = new Array(this.getLength());\r\n    for (let i = 0; i < this.getLength(); i++) {\r\n      num[i] = this.get(i);\r\n    }\r\n    for (let i = 0; i < e.getLength(); i++) {\r\n      num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);\r\n    }\r\n    return new QRPolynomial(num, 0).mod(e);\r\n  }\r\n}\r\n","import { QRMaskPattern } from './QRMaskPattern';\r\nimport { QRPolynomial } from './QRPolynomial';\r\nimport { QRMode } from './QRMode';\r\nimport * as QRMath from './QRMath';\r\n\r\nexport const PATTERN_POSITION_TABLE = [\r\n  [],\r\n  [6, 18],\r\n  [6, 22],\r\n  [6, 26],\r\n  [6, 30],\r\n  [6, 34],\r\n  [6, 22, 38],\r\n  [6, 24, 42],\r\n  [6, 26, 46],\r\n  [6, 28, 50],\r\n  [6, 30, 54],\r\n  [6, 32, 58],\r\n  [6, 34, 62],\r\n  [6, 26, 46, 66],\r\n  [6, 26, 48, 70],\r\n  [6, 26, 50, 74],\r\n  [6, 30, 54, 78],\r\n  [6, 30, 56, 82],\r\n  [6, 30, 58, 86],\r\n  [6, 34, 62, 90],\r\n  [6, 28, 50, 72, 94],\r\n  [6, 26, 50, 74, 98],\r\n  [6, 30, 54, 78, 102],\r\n  [6, 28, 54, 80, 106],\r\n  [6, 32, 58, 84, 110],\r\n  [6, 30, 58, 86, 114],\r\n  [6, 34, 62, 90, 118],\r\n  [6, 26, 50, 74, 98, 122],\r\n  [6, 30, 54, 78, 102, 126],\r\n  [6, 26, 52, 78, 104, 130],\r\n  [6, 30, 56, 82, 108, 134],\r\n  [6, 34, 60, 86, 112, 138],\r\n  [6, 30, 58, 86, 114, 142],\r\n  [6, 34, 62, 90, 118, 146],\r\n  [6, 30, 54, 78, 102, 126, 150],\r\n  [6, 24, 50, 76, 102, 128, 154],\r\n  [6, 28, 54, 80, 106, 132, 158],\r\n  [6, 32, 58, 84, 110, 136, 162],\r\n  [6, 26, 54, 82, 110, 138, 166],\r\n  [6, 30, 58, 86, 114, 142, 170],\r\n];\r\n\r\nexport const G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\r\n\r\nexport const G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);\r\n\r\nexport const G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\r\n\r\nexport const getBCHDigit = (data) => {\r\n  let digit = 0;\r\n  while (data !== 0) {\r\n    digit++;\r\n    data >>>= 1;\r\n  }\r\n  return digit;\r\n};\r\n\r\nexport const getBCHTypeInfo = (data) => {\r\n  let d = data << 10;\r\n  while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\r\n    d ^= G15 << (getBCHDigit(d) - getBCHDigit(G15));\r\n  }\r\n  return ((data << 10) | d) ^ G15_MASK;\r\n};\r\n\r\nexport const getBCHTypeNumber = (data) => {\r\n  let d = data << 12;\r\n  while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\r\n    d ^= G18 << (getBCHDigit(d) - getBCHDigit(G18));\r\n  }\r\n  return (data << 12) | d;\r\n};\r\n\r\nexport const getPatternPosition = (typeNumber) => {\r\n  return PATTERN_POSITION_TABLE[typeNumber - 1];\r\n};\r\n\r\nexport const getMask = (maskPattern, i, j) => {\r\n  switch (maskPattern) {\r\n    case QRMaskPattern.PATTERN000:\r\n      return (i + j) % 2 === 0;\r\n    case QRMaskPattern.PATTERN001:\r\n      return i % 2 === 0;\r\n    case QRMaskPattern.PATTERN010:\r\n      return j % 3 === 0;\r\n    case QRMaskPattern.PATTERN011:\r\n      return (i + j) % 3 === 0;\r\n    case QRMaskPattern.PATTERN100:\r\n      return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\r\n    case QRMaskPattern.PATTERN101:\r\n      return ((i * j) % 2) + ((i * j) % 3) === 0;\r\n    case QRMaskPattern.PATTERN110:\r\n      return (((i * j) % 2) + ((i * j) % 3)) % 2 === 0;\r\n    case QRMaskPattern.PATTERN111:\r\n      return (((i * j) % 3) + ((i + j) % 2)) % 2 === 0;\r\n    default:\r\n      throw new Error('bad maskPattern:' + maskPattern);\r\n  }\r\n};\r\n\r\nexport const getErrorCorrectPolynomial = (errorCorrectLength) => {\r\n  let a = new QRPolynomial([1], 0);\r\n  for (let i = 0; i < errorCorrectLength; i++) {\r\n    a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));\r\n  }\r\n  return a;\r\n};\r\n\r\nexport const getLengthInBits = (mode, type) => {\r\n  if (1 <= type && type < 10) {\r\n    switch (mode) {\r\n      case QRMode.MODE_NUMBER:\r\n        return 10;\r\n      case QRMode.MODE_ALPHA_NUM:\r\n        return 9;\r\n      case QRMode.MODE_8BIT_BYTE:\r\n        return 8;\r\n      case QRMode.MODE_KANJI:\r\n        return 8;\r\n      default:\r\n        throw new Error('mode:' + mode);\r\n    }\r\n  } else if (type < 27) {\r\n    switch (mode) {\r\n      case QRMode.MODE_NUMBER:\r\n        return 12;\r\n      case QRMode.MODE_ALPHA_NUM:\r\n        return 11;\r\n      case QRMode.MODE_8BIT_BYTE:\r\n        return 16;\r\n      case QRMode.MODE_KANJI:\r\n        return 10;\r\n      default:\r\n        throw new Error('mode:' + mode);\r\n    }\r\n  } else if (type < 41) {\r\n    switch (mode) {\r\n      case QRMode.MODE_NUMBER:\r\n        return 14;\r\n      case QRMode.MODE_ALPHA_NUM:\r\n        return 13;\r\n      case QRMode.MODE_8BIT_BYTE:\r\n        return 16;\r\n      case QRMode.MODE_KANJI:\r\n        return 12;\r\n      default:\r\n        throw new Error('mode:' + mode);\r\n    }\r\n  } else {\r\n    throw new Error('type:' + type);\r\n  }\r\n};\r\n\r\nexport const getLostPoint = (qrCode) => {\r\n  const moduleCount = qrCode.getModuleCount();\r\n  let lostPoint = 0;\r\n  for (let row = 0; row < moduleCount; row++) {\r\n    for (let col = 0; col < moduleCount; col++) {\r\n      let sameCount = 0;\r\n      const dark = qrCode.isDark(row, col);\r\n      for (let r = -1; r <= 1; r++) {\r\n        if (row + r < 0 || moduleCount <= row + r) {\r\n          continue;\r\n        }\r\n        for (let c = -1; c <= 1; c++) {\r\n          if (col + c < 0 || moduleCount <= col + c) {\r\n            continue;\r\n          }\r\n          if (r === 0 && c === 0) {\r\n            continue;\r\n          }\r\n          if (dark === qrCode.isDark(row + r, col + c)) {\r\n            sameCount++;\r\n          }\r\n        }\r\n      }\r\n      if (sameCount > 5) {\r\n        lostPoint += 3 + sameCount - 5;\r\n      }\r\n    }\r\n  }\r\n  for (let row = 0; row < moduleCount - 1; row++) {\r\n    for (let col = 0; col < moduleCount - 1; col++) {\r\n      let count = 0;\r\n      if (qrCode.isDark(row, col)) count++;\r\n      if (qrCode.isDark(row + 1, col)) count++;\r\n      if (qrCode.isDark(row, col + 1)) count++;\r\n      if (qrCode.isDark(row + 1, col + 1)) count++;\r\n      if (count === 0 || count === 4) {\r\n        lostPoint += 3;\r\n      }\r\n    }\r\n  }\r\n  for (let row = 0; row < moduleCount; row++) {\r\n    for (let col = 0; col < moduleCount - 6; col++) {\r\n      if (\r\n        qrCode.isDark(row, col) &&\r\n        !qrCode.isDark(row, col + 1) &&\r\n        qrCode.isDark(row, col + 2) &&\r\n        qrCode.isDark(row, col + 3) &&\r\n        qrCode.isDark(row, col + 4) &&\r\n        !qrCode.isDark(row, col + 5) &&\r\n        qrCode.isDark(row, col + 6)\r\n      ) {\r\n        lostPoint += 40;\r\n      }\r\n    }\r\n  }\r\n  for (let col = 0; col < moduleCount; col++) {\r\n    for (let row = 0; row < moduleCount - 6; row++) {\r\n      if (\r\n        qrCode.isDark(row, col) &&\r\n        !qrCode.isDark(row + 1, col) &&\r\n        qrCode.isDark(row + 2, col) &&\r\n        qrCode.isDark(row + 3, col) &&\r\n        qrCode.isDark(row + 4, col) &&\r\n        !qrCode.isDark(row + 5, col) &&\r\n        qrCode.isDark(row + 6, col)\r\n      ) {\r\n        lostPoint += 40;\r\n      }\r\n    }\r\n  }\r\n  let darkCount = 0;\r\n  for (let col = 0; col < moduleCount; col++) {\r\n    for (let row = 0; row < moduleCount; row++) {\r\n      if (qrCode.isDark(row, col)) {\r\n        darkCount++;\r\n      }\r\n    }\r\n  }\r\n  const ratio = Math.abs((100 * darkCount) / moduleCount / moduleCount - 50) / 5;\r\n  lostPoint += ratio * 10;\r\n  return lostPoint;\r\n};\r\n","export const QRMaskPattern = {\r\n  PATTERN000: 0,\r\n  PATTERN001: 1,\r\n  PATTERN010: 2,\r\n  PATTERN011: 3,\r\n  PATTERN100: 4,\r\n  PATTERN101: 5,\r\n  PATTERN110: 6,\r\n  PATTERN111: 7,\r\n};\r\n\r\nexport type QRMaskPattern = typeof QRMaskPattern[keyof typeof QRMaskPattern];\r\n","import { QR8bitByte } from './QR8bitByte';\r\nimport { QRRSBlock } from './QRRSBlock';\r\nimport { QRBitBuffer } from './QRBitBuffer';\r\nimport { QRPolynomial } from './QRPolynomial';\r\nimport * as QRUtil from './QRUtil';\r\n\r\nconst PAD0 = 0xec;\r\nconst PAD1 = 0x11;\r\n\r\nexport class QRCodeModel {\r\n  typeNumber!: number;\r\n  errorCorrectLevel!: number;\r\n  modules: (boolean | null)[][] = [];\r\n  moduleCount = 0;\r\n  dataCache: number[] | null = null;\r\n  dataList: QR8bitByte[] = [];\r\n\r\n  constructor(typeNumber, errorCorrectLevel) {\r\n    this.typeNumber = typeNumber;\r\n    this.errorCorrectLevel = errorCorrectLevel;\r\n  }\r\n\r\n  addData(data) {\r\n    const newData = new QR8bitByte(data);\r\n    this.dataList.push(newData);\r\n    this.dataCache = null;\r\n  }\r\n\r\n  isDark(row, col) {\r\n    if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\r\n      throw new Error(row + ',' + col);\r\n    }\r\n    return this.modules[row][col];\r\n  }\r\n\r\n  getModuleCount() {\r\n    return this.moduleCount;\r\n  }\r\n\r\n  make() {\r\n    this.makeImpl(false, this.getBestMaskPattern());\r\n  }\r\n\r\n  makeImpl(test, maskPattern) {\r\n    this.moduleCount = this.typeNumber * 4 + 17;\r\n    this.modules = new Array(this.moduleCount);\r\n    for (let row = 0; row < this.moduleCount; row++) {\r\n      this.modules[row] = new Array(this.moduleCount);\r\n      for (let col = 0; col < this.moduleCount; col++) {\r\n        this.modules[row][col] = null;\r\n      }\r\n    }\r\n    this.setupPositionProbePattern(0, 0);\r\n    this.setupPositionProbePattern(this.moduleCount - 7, 0);\r\n    this.setupPositionProbePattern(0, this.moduleCount - 7);\r\n    this.setupPositionAdjustPattern();\r\n    this.setupTimingPattern();\r\n    this.setupTypeInfo(test, maskPattern);\r\n    if (this.typeNumber >= 7) {\r\n      this.setupTypeNumber(test);\r\n    }\r\n    if (this.dataCache == null) {\r\n      this.dataCache = this.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\r\n    }\r\n    this.mapData(this.dataCache, maskPattern);\r\n  }\r\n\r\n  setupPositionProbePattern(row, col) {\r\n    for (let r = -1; r <= 7; r++) {\r\n      if (row + r <= -1 || this.moduleCount <= row + r) continue;\r\n      for (let c = -1; c <= 7; c++) {\r\n        if (col + c <= -1 || this.moduleCount <= col + c) continue;\r\n        this.modules[row + r][col + c] =\r\n          (0 <= r && r <= 6 && (c === 0 || c === 6)) ||\r\n          (0 <= c && c <= 6 && (r === 0 || r === 6)) ||\r\n          (2 <= r && r <= 4 && 2 <= c && c <= 4);\r\n      }\r\n    }\r\n  }\r\n\r\n  getBestMaskPattern() {\r\n    let minLostPoint = 0;\r\n    let pattern = 0;\r\n    for (let i = 0; i < 8; i++) {\r\n      this.makeImpl(true, i);\r\n      const lostPoint = QRUtil.getLostPoint(this);\r\n      if (i === 0 || minLostPoint > lostPoint) {\r\n        minLostPoint = lostPoint;\r\n        pattern = i;\r\n      }\r\n    }\r\n    return pattern;\r\n  }\r\n\r\n  createMovieClip(target_mc, instance_name, depth) {\r\n    const qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\r\n    const cs = 1;\r\n    this.make();\r\n    for (let row = 0; row < this.modules.length; row++) {\r\n      const y = row * cs;\r\n      for (let col = 0; col < this.modules[row].length; col++) {\r\n        const x = col * cs;\r\n        const dark = this.modules[row][col];\r\n        if (dark) {\r\n          qr_mc.beginFill(0, 100);\r\n          qr_mc.moveTo(x, y);\r\n          qr_mc.lineTo(x + cs, y);\r\n          qr_mc.lineTo(x + cs, y + cs);\r\n          qr_mc.lineTo(x, y + cs);\r\n          qr_mc.endFill();\r\n        }\r\n      }\r\n    }\r\n    return qr_mc;\r\n  }\r\n\r\n  setupTimingPattern() {\r\n    for (let r = 8; r < this.moduleCount - 8; r++) {\r\n      if (this.modules[r][6] != null) {\r\n        continue;\r\n      }\r\n      this.modules[r][6] = r % 2 === 0;\r\n    }\r\n    for (let c = 8; c < this.moduleCount - 8; c++) {\r\n      if (this.modules[6][c] != null) {\r\n        continue;\r\n      }\r\n      this.modules[6][c] = c % 2 === 0;\r\n    }\r\n  }\r\n\r\n  setupPositionAdjustPattern() {\r\n    const pos = QRUtil.getPatternPosition(this.typeNumber);\r\n    for (let i = 0; i < pos.length; i++) {\r\n      for (let j = 0; j < pos.length; j++) {\r\n        const row = pos[i];\r\n        const col = pos[j];\r\n        if (this.modules[row][col] != null) {\r\n          continue;\r\n        }\r\n        for (let r = -2; r <= 2; r++) {\r\n          for (let c = -2; c <= 2; c++) {\r\n            if (r === -2 || r === 2 || c === -2 || c === 2 || (r === 0 && c === 0)) {\r\n              this.modules[row + r][col + c] = true;\r\n            } else {\r\n              this.modules[row + r][col + c] = false;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  setupTypeNumber(test) {\r\n    const bits = QRUtil.getBCHTypeNumber(this.typeNumber);\r\n    for (let i = 0; i < 18; i++) {\r\n      this.modules[Math.floor(i / 3)][(i % 3) + this.moduleCount - 8 - 3] = !test && ((bits >> i) & 1) === 1;\r\n    }\r\n    for (let i = 0; i < 18; i++) {\r\n      this.modules[(i % 3) + this.moduleCount - 8 - 3][Math.floor(i / 3)] = !test && ((bits >> i) & 1) === 1;\r\n    }\r\n  }\r\n\r\n  setupTypeInfo(test, maskPattern) {\r\n    const data = (this.errorCorrectLevel << 3) | maskPattern;\r\n    const bits = QRUtil.getBCHTypeInfo(data);\r\n    for (let i = 0; i < 15; i++) {\r\n      const mod = !test && ((bits >> i) & 1) === 1;\r\n      if (i < 6) {\r\n        this.modules[i][8] = mod;\r\n      } else if (i < 8) {\r\n        this.modules[i + 1][8] = mod;\r\n      } else {\r\n        this.modules[this.moduleCount - 15 + i][8] = mod;\r\n      }\r\n    }\r\n    for (let i = 0; i < 15; i++) {\r\n      const mod = !test && ((bits >> i) & 1) === 1;\r\n      if (i < 8) {\r\n        this.modules[8][this.moduleCount - i - 1] = mod;\r\n      } else if (i < 9) {\r\n        this.modules[8][15 - i - 1 + 1] = mod;\r\n      } else {\r\n        this.modules[8][15 - i - 1] = mod;\r\n      }\r\n    }\r\n    this.modules[this.moduleCount - 8][8] = !test;\r\n  }\r\n\r\n  mapData(data, maskPattern) {\r\n    let inc = -1;\r\n    let row = this.moduleCount - 1;\r\n    let bitIndex = 7;\r\n    let byteIndex = 0;\r\n    for (let col = this.moduleCount - 1; col > 0; col -= 2) {\r\n      if (col === 6) col--;\r\n      while (true) {\r\n        for (let c = 0; c < 2; c++) {\r\n          if (this.modules[row][col - c] == null) {\r\n            let dark = false;\r\n            if (byteIndex < data.length) {\r\n              dark = ((data[byteIndex] >>> bitIndex) & 1) === 1;\r\n            }\r\n            const mask = QRUtil.getMask(maskPattern, row, col - c);\r\n            if (mask) {\r\n              dark = !dark;\r\n            }\r\n            this.modules[row][col - c] = dark;\r\n            bitIndex--;\r\n            if (bitIndex === -1) {\r\n              byteIndex++;\r\n              bitIndex = 7;\r\n            }\r\n          }\r\n        }\r\n        row += inc;\r\n        if (row < 0 || this.moduleCount <= row) {\r\n          row -= inc;\r\n          inc = -inc;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createData(typeNumber, errorCorrectLevel, dataList) {\r\n    const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\r\n    const buffer = new QRBitBuffer();\r\n    for (let i = 0; i < dataList.length; i++) {\r\n      const data = dataList[i];\r\n      buffer.put(data.mode, 4);\r\n      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));\r\n      data.write(buffer);\r\n    }\r\n    let totalDataCount = 0;\r\n    for (let i = 0; i < rsBlocks.length; i++) {\r\n      totalDataCount += rsBlocks[i].dataCount;\r\n    }\r\n    if (buffer.getLengthInBits() > totalDataCount * 8) {\r\n      throw new Error('code length overflow. (' + buffer.getLengthInBits() + '>' + totalDataCount * 8 + ')');\r\n    }\r\n    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\r\n      buffer.put(0, 4);\r\n    }\r\n    while (buffer.getLengthInBits() % 8 !== 0) {\r\n      buffer.putBit(false);\r\n    }\r\n    while (true) {\r\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\r\n        break;\r\n      }\r\n      buffer.put(PAD0, 8);\r\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\r\n        break;\r\n      }\r\n      buffer.put(PAD1, 8);\r\n    }\r\n    return this.createBytes(buffer, rsBlocks);\r\n  }\r\n\r\n  createBytes(buffer, rsBlocks) {\r\n    let offset = 0;\r\n    let maxDcCount = 0;\r\n    let maxEcCount = 0;\r\n    const dcdata = new Array(rsBlocks.length);\r\n    const ecdata = new Array(rsBlocks.length);\r\n    for (let r = 0; r < rsBlocks.length; r++) {\r\n      const dcCount = rsBlocks[r].dataCount;\r\n      const ecCount = rsBlocks[r].totalCount - dcCount;\r\n      maxDcCount = Math.max(maxDcCount, dcCount);\r\n      maxEcCount = Math.max(maxEcCount, ecCount);\r\n      dcdata[r] = new Array(dcCount);\r\n      for (let i = 0; i < dcdata[r].length; i++) {\r\n        dcdata[r][i] = 0xff & buffer.buffer[i + offset];\r\n      }\r\n      offset += dcCount;\r\n      const rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\r\n      const rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);\r\n      const modPoly = rawPoly.mod(rsPoly);\r\n      ecdata[r] = new Array(rsPoly.getLength() - 1);\r\n      for (let i = 0; i < ecdata[r].length; i++) {\r\n        const modIndex = i + modPoly.getLength() - ecdata[r].length;\r\n        ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\r\n      }\r\n    }\r\n    let totalCodeCount = 0;\r\n    for (let i = 0; i < rsBlocks.length; i++) {\r\n      totalCodeCount += rsBlocks[i].totalCount;\r\n    }\r\n    const data = new Array(totalCodeCount);\r\n    let index = 0;\r\n    for (let i = 0; i < maxDcCount; i++) {\r\n      for (let r = 0; r < rsBlocks.length; r++) {\r\n        if (i < dcdata[r].length) {\r\n          data[index++] = dcdata[r][i];\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < maxEcCount; i++) {\r\n      for (let r = 0; r < rsBlocks.length; r++) {\r\n        if (i < ecdata[r].length) {\r\n          data[index++] = ecdata[r][i];\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n}\r\n","export const QRCodeLimitLength = [\r\n  [17, 14, 11, 7],\r\n  [32, 26, 20, 14],\r\n  [53, 42, 32, 24],\r\n  [78, 62, 46, 34],\r\n  [106, 84, 60, 44],\r\n  [134, 106, 74, 58],\r\n  [154, 122, 86, 64],\r\n  [192, 152, 108, 84],\r\n  [230, 180, 130, 98],\r\n  [271, 213, 151, 119],\r\n  [321, 251, 177, 137],\r\n  [367, 287, 203, 155],\r\n  [425, 331, 241, 177],\r\n  [458, 362, 258, 194],\r\n  [520, 412, 292, 220],\r\n  [586, 450, 322, 250],\r\n  [644, 504, 364, 280],\r\n  [718, 560, 394, 310],\r\n  [792, 624, 442, 338],\r\n  [858, 666, 482, 382],\r\n  [929, 711, 509, 403],\r\n  [1003, 779, 565, 439],\r\n  [1091, 857, 611, 461],\r\n  [1171, 911, 661, 511],\r\n  [1273, 997, 715, 535],\r\n  [1367, 1059, 751, 593],\r\n  [1465, 1125, 805, 625],\r\n  [1528, 1190, 868, 658],\r\n  [1628, 1264, 908, 698],\r\n  [1732, 1370, 982, 742],\r\n  [1840, 1452, 1030, 790],\r\n  [1952, 1538, 1112, 842],\r\n  [2068, 1628, 1168, 898],\r\n  [2188, 1722, 1228, 958],\r\n  [2303, 1809, 1283, 983],\r\n  [2431, 1911, 1351, 1051],\r\n  [2563, 1989, 1423, 1093],\r\n  [2699, 2099, 1499, 1139],\r\n  [2809, 2213, 1579, 1219],\r\n  [2953, 2331, 1663, 1273],\r\n];\r\n","export const getProp = (object, keys, defaultVal = undefined) => {\r\n  keys = Array.isArray(keys) ? keys : keys.split('.');\r\n  object = object[keys[0]];\r\n  if (object && keys.length > 1) {\r\n    return getProp(object, keys.slice(1));\r\n  }\r\n  return object === undefined ? defaultVal : object;\r\n};\r\n\r\nexport const round = (val: number, precision = 1e1) => {\r\n  return Math.round(val * precision) / precision;\r\n};\r\n\r\nexport const neighborOffsets = [\r\n  [-1, 0],\r\n  [0, -1],\r\n  [1, 0],\r\n  [0, 1],\r\n];\r\n\r\nexport const contour = [\r\n  [\r\n    [0, 0],\r\n    [0, 1],\r\n  ],\r\n  [\r\n    [0, 0],\r\n    [1, 0],\r\n  ],\r\n  [\r\n    [1, 0],\r\n    [1, 1],\r\n  ],\r\n  [\r\n    [0, 1],\r\n    [1, 1],\r\n  ],\r\n];\r\n\r\nexport const getUTF8Length = (content) => {\r\n  const result = encodeURI(content)\r\n    .toString()\r\n    .replace(/%[0-9a-fA-F]{2}/g, 'a');\r\n  return result.length + (result.length !== content ? 3 : 0);\r\n};\r\n","import { QRCodeModel } from './QRCodeModel';\r\nimport { QRErrorCorrectLevel } from './QRErrorCorrectLevel';\r\nimport { QRCodeLimitLength } from './QRCodeLimitLength';\r\nimport { getUTF8Length } from './utils';\r\n\r\ntype QRCodeOptions = {\r\n  ecl: 'L' | 'M' | 'Q' | 'H';\r\n  content: string;\r\n};\r\n\r\nexport class QRCode {\r\n  options: QRCodeOptions = {\r\n    ecl: 'M',\r\n    content: '',\r\n  };\r\n\r\n  private readonly qrcode!: QRCodeModel;\r\n\r\n  constructor(options: Partial<QRCodeOptions>) {\r\n    for (const i in options) {\r\n      this.options[i] = options[i];\r\n    }\r\n\r\n    if (this.options.content.length === 0) {\r\n      throw new Error(\"Expected 'content' to be non-empty!\");\r\n    }\r\n\r\n    const content = this.options.content;\r\n    const type = this.getTypeNumber(content, this.options.ecl);\r\n    const ecl = this.getErrorCorrectLevel(this.options.ecl);\r\n    this.qrcode = new QRCodeModel(type, ecl);\r\n    this.qrcode.addData(content);\r\n    this.qrcode.make();\r\n  }\r\n\r\n  private getErrorCorrectLevel(ecl) {\r\n    const result = QRErrorCorrectLevel[ecl];\r\n\r\n    if (result == undefined) {\r\n      throw new Error('Unknwon error correction level: ' + ecl);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private getTypeNumber(content, ecl) {\r\n    const length = getUTF8Length(content);\r\n\r\n    let type = 1;\r\n    let limit = 0;\r\n    let i = 0;\r\n    const len = QRCodeLimitLength.length;\r\n    for (; i <= len; i++) {\r\n      const table = QRCodeLimitLength[i];\r\n      if (!table) {\r\n        throw new Error('Content too long: expected ' + limit + ' but got ' + length);\r\n      }\r\n\r\n      switch (ecl) {\r\n        case 'L':\r\n          limit = table[0];\r\n          break;\r\n\r\n        case 'M':\r\n          limit = table[1];\r\n          break;\r\n\r\n        case 'Q':\r\n          limit = table[2];\r\n          break;\r\n\r\n        case 'H':\r\n          limit = table[3];\r\n          break;\r\n\r\n        default:\r\n          throw new Error('Unknwon error correction level: ' + ecl);\r\n      }\r\n\r\n      if (length <= limit) {\r\n        break;\r\n      }\r\n\r\n      type++;\r\n    }\r\n\r\n    if (type > QRCodeLimitLength.length) {\r\n      throw new Error('Content too long');\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  emptyCenter(emptySize: number, emptySizeHeight?: number) {\r\n    const { size } = this;\r\n\r\n    emptySizeHeight = emptySizeHeight || emptySize;\r\n\r\n    const halfSize = size / 2;\r\n    const halfEmptySize = emptySize / 2;\r\n    const halfEmptySizeHeight = emptySizeHeight / 2;\r\n\r\n    for (let y = 0; y < size; y++) {\r\n      for (let x = 0; x < size; x++) {\r\n        if (\r\n          y >= halfSize - halfEmptySizeHeight &&\r\n          y < halfSize + halfEmptySizeHeight &&\r\n          x >= halfSize - halfEmptySize &&\r\n          x < halfSize + halfEmptySize\r\n        ) {\r\n          this.matrix[y][x] = false;\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  get matrix() {\r\n    return this.qrcode.modules;\r\n  }\r\n\r\n  get size() {\r\n    return this.qrcode.moduleCount;\r\n  }\r\n}\r\n","import { getProp, round, neighborOffsets, contour } from './utils';\r\nimport { QRCode } from './QRCode';\r\n\r\ntype QRSvgOptions = {\r\n  size: number;\r\n  radiusFactor: number;\r\n  cornerBlockRadiusFactor?: number;\r\n  roundOuterCorners: boolean;\r\n  roundInnerCorners: boolean;\r\n  cornerBlocksAsCircles: boolean;\r\n  fill: string;\r\n  preContent?: string | ((QRSvg) => string);\r\n  postContent?: string | ((QRSvg) => string);\r\n};\r\n\r\ntype Pride = 1 | 0;\r\n\r\ntype Cell = {\r\n  pride: Pride;\r\n  x: number;\r\n  y: number;\r\n  blockId?: string;\r\n  isCornerBlock: boolean;\r\n};\r\n\r\ntype LineSegment = {\r\n  processed: boolean;\r\n  p1: { x: number; y: number };\r\n  p2: { x: number; y: number };\r\n  cell: Cell;\r\n  cr: number;\r\n};\r\n\r\ntype LineSegmentsWithCrops = LineSegment[] & { crops?: LineSegment[][] };\r\n\r\nconst findNeighbors = (matrix: Cell[][], cell: Cell, pride: Pride, expectCells: Cell[] = []) => {\r\n  expectCells.push(cell);\r\n\r\n  for (const offset of neighborOffsets) {\r\n    const neighborCoord = { x: cell.x + offset[0], y: cell.y + offset[1] };\r\n\r\n    if (!expectCells.find((i) => i.x === neighborCoord.x && i.y === neighborCoord.y)) {\r\n      const neighborCell = getProp(matrix, [neighborCoord.y, neighborCoord.x]);\r\n\r\n      if (neighborCell && neighborCell.pride === pride) {\r\n        const pride = neighborCell.pride;\r\n        findNeighbors(matrix, neighborCell, pride, expectCells);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport class QRSvg {\r\n  private options: QRSvgOptions = {\r\n    size: 0,\r\n    radiusFactor: 0.75,\r\n    roundOuterCorners: true,\r\n    roundInnerCorners: true,\r\n    cornerBlocksAsCircles: false,\r\n    fill: 'currentColor',\r\n  };\r\n\r\n  private matrix!: Cell[][];\r\n\r\n  paths: string[] = [];\r\n\r\n  private readonly matrixSize!: number;\r\n\r\n  private lines: Record<string, LineSegmentsWithCrops> = {};\r\n\r\n  private lastUniqId = 0;\r\n\r\n  readonly pointSize!: number;\r\n\r\n  constructor(qrCode: QRCode, options: Partial<QRSvgOptions>) {\r\n    for (const i in options) {\r\n      this.options[i] = options[i];\r\n    }\r\n\r\n    if (this.options.cornerBlockRadiusFactor === undefined) {\r\n      this.options.cornerBlockRadiusFactor = this.options.radiusFactor;\r\n    }\r\n\r\n    if (!(this.options.size > 0)) {\r\n      throw new Error(\"Expected 'size' value to be higher than zero!\");\r\n    }\r\n\r\n    this.matrixSize = qrCode.size;\r\n    this.pointSize = this.options.size / this.matrixSize;\r\n\r\n    this.matrix = (() => {\r\n      const result: Cell[][] = [];\r\n      qrCode.matrix.forEach((row, rowIdx) => {\r\n        result[rowIdx] = [];\r\n        row.forEach((val, idx) => {\r\n          result[rowIdx][idx] = {\r\n            pride: val ? 1 : 0,\r\n            x: idx,\r\n            y: rowIdx,\r\n            blockId: undefined,\r\n            isCornerBlock: false,\r\n          } as Cell;\r\n        });\r\n      });\r\n      return result;\r\n    })();\r\n\r\n    this.detectBlocks();\r\n    this.detectLines();\r\n    this.generatePaths();\r\n  }\r\n\r\n  private detectBlocks() {\r\n    const { matrixSize, matrix } = this;\r\n\r\n    for (let y = 0; y < matrixSize; y++) {\r\n      for (let x = 0; x < matrixSize; x++) {\r\n        const currCell = matrix[y][x];\r\n        if (currCell.blockId === undefined && currCell.pride === 1) {\r\n          const cells: Cell[] = [];\r\n          findNeighbors(matrix, currCell, 1, cells);\r\n          const blockId = this.getUniqId();\r\n          cells.forEach((cell) => {\r\n            const { x, y } = cell;\r\n            cell.blockId = blockId;\r\n\r\n            if ((x < 8 && y < 8) || (x > this.matrixSize - 8 && y < 8) || (x < 8 && y > this.matrixSize - 8)) {\r\n              cell.isCornerBlock = true;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private detectLines() {\r\n    const { lines, matrixSize, matrix } = this;\r\n\r\n    const pathRadius = (this.pointSize / 2) * Math.min(this.options.radiusFactor, 10);\r\n    const cornerBlockPathRadius = (this.pointSize / 2) * Math.min(this.options.cornerBlockRadiusFactor as number, 10);\r\n\r\n    for (let y = 0; y < matrixSize; y++) {\r\n      for (let x = 0; x < matrixSize; x++) {\r\n        const cell = matrix[y][x];\r\n        if (cell.blockId === undefined) {\r\n          continue;\r\n        }\r\n\r\n        if (cell.isCornerBlock && this.options.cornerBlocksAsCircles) {\r\n          continue;\r\n        }\r\n\r\n        neighborOffsets.forEach((offset, idx) => {\r\n          const neighborCell = getProp(matrix, [y + offset[0], x + offset[1]]);\r\n          if (!neighborCell || neighborCell.blockId !== cell.blockId) {\r\n            if (cell.blockId) {\r\n              lines[cell.blockId] = lines[cell.blockId] || [];\r\n              lines[cell.blockId].push({\r\n                processed: false,\r\n                p1: { y: y + contour[idx][0][0], x: x + contour[idx][0][1] },\r\n                p2: { y: y + contour[idx][1][0], x: x + contour[idx][1][1] },\r\n                cell,\r\n                cr: cell.isCornerBlock ? cornerBlockPathRadius : pathRadius,\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    Object.keys(lines).forEach((key) => {\r\n      const line = lines[key];\r\n\r\n      const proc = (py, px, result, oCell) => {\r\n        const nextSegs = line\r\n          .filter((seg) => {\r\n            if (!seg.processed) {\r\n              if ((seg.p1.y === py && seg.p1.x === px) || (seg.p2.y === py && seg.p2.x === px)) {\r\n                return true;\r\n              }\r\n            }\r\n            return false;\r\n          })\r\n          .sort((a, b) => {\r\n            if (a.cell === oCell) {\r\n              return -1;\r\n            }\r\n            return 1;\r\n          });\r\n\r\n        const nextSeg = nextSegs[0];\r\n\r\n        if (nextSeg) {\r\n          nextSeg.processed = true;\r\n          let resultSeg;\r\n          if (nextSeg.p1.y === py && nextSeg.p1.x === px) {\r\n            resultSeg = { p1: nextSeg.p1, p2: nextSeg.p2, cr: nextSeg.cr };\r\n          } else if (nextSeg.p2.y === py && nextSeg.p2.x === px) {\r\n            resultSeg = { p1: nextSeg.p2, p2: nextSeg.p1, cr: nextSeg.cr };\r\n          }\r\n          result.push(resultSeg);\r\n          proc(resultSeg.p2.y, resultSeg.p2.x, result, nextSeg.cell);\r\n        }\r\n      };\r\n      line[0].processed = true;\r\n      const result: LineSegmentsWithCrops = [line[0]];\r\n      proc(line[0].p2.y, line[0].p2.x, result, line[0].cell);\r\n      lines[key] = result;\r\n      lines[key].crops = [];\r\n\r\n      let checkCrops = true;\r\n      while (checkCrops) {\r\n        const notProcessedSeg = line.find((i) => !i.processed);\r\n        if (notProcessedSeg) {\r\n          notProcessedSeg.processed = true;\r\n          const cropResult = [notProcessedSeg];\r\n          proc(notProcessedSeg.p2.y, notProcessedSeg.p2.x, cropResult, notProcessedSeg.cell);\r\n          cropResult.reverse();\r\n          cropResult.map((seg) => {\r\n            const op2 = seg.p2;\r\n            seg.p2 = seg.p1;\r\n            seg.p1 = op2;\r\n            return seg;\r\n          });\r\n          lines[key]?.crops?.push(cropResult);\r\n        } else {\r\n          checkCrops = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private getDir(seg) {\r\n    if (seg.p1.x === seg.p2.x) {\r\n      if (seg.p1.y > seg.p2.y) {\r\n        return 'sn';\r\n      }\r\n      return 'ns';\r\n    }\r\n    if (seg.p1.y === seg.p2.y) {\r\n      if (seg.p1.x > seg.p2.x) {\r\n        return 'ew';\r\n      }\r\n      return 'we';\r\n    }\r\n  }\r\n\r\n  private getSubPath(seg, prevSeg, roundOuterCorners, roundInnerCorners) {\r\n    const { pointSize } = this;\r\n\r\n    let {\r\n      p1: { x, y },\r\n      cr,\r\n    } = seg;\r\n\r\n    x = x * pointSize;\r\n    y = y * pointSize;\r\n\r\n    const xmcr = round(x - cr);\r\n    const xpcr = round(x + cr);\r\n\r\n    const ymcr = round(y - cr);\r\n    const ypcr = round(y + cr);\r\n\r\n    x = round(x);\r\n    y = round(y);\r\n\r\n    const segDir = this.getDir(seg);\r\n    const prevSegDir = this.getDir(prevSeg);\r\n\r\n    let path = '';\r\n    if (cr && roundOuterCorners && prevSegDir === 'we' && segDir === 'ns') {\r\n      path += `L${xmcr} ${y} `;\r\n      path += `Q${x} ${y} ${x} ${ypcr}`;\r\n    } else if (cr && roundOuterCorners && prevSegDir === 'ns' && segDir === 'ew') {\r\n      path += `L${x} ${ymcr} `;\r\n      path += `Q${x} ${y} ${xmcr} ${y}`;\r\n    } else if (cr && roundOuterCorners && prevSegDir === 'ew' && segDir === 'sn') {\r\n      path += `L${xpcr} ${y} `;\r\n      path += `Q${x} ${y} ${x} ${ymcr}`;\r\n    } else if (cr && roundOuterCorners && prevSegDir === 'sn' && segDir === 'we') {\r\n      path += `L${x} ${ypcr} `;\r\n      path += `Q${x} ${y} ${xpcr} ${y}`;\r\n    } else if (cr && roundInnerCorners && prevSegDir === 'sn' && segDir === 'ew') {\r\n      path += `L${x} ${ypcr} `;\r\n      path += `Q${x} ${y} ${xmcr} ${y}`;\r\n    } else if (cr && roundInnerCorners && prevSegDir === 'ew' && segDir === 'ns') {\r\n      path += `L${xpcr} ${y} `;\r\n      path += `Q${x} ${y} ${x} ${ypcr}`;\r\n    } else if (cr && roundInnerCorners && prevSegDir === 'ns' && segDir === 'we') {\r\n      path += `L${x} ${ymcr} `;\r\n      path += `Q${x} ${y} ${xpcr} ${y}`;\r\n    } else if (cr && roundInnerCorners && prevSegDir === 'we' && segDir === 'sn') {\r\n      path += `L${xmcr} ${y} `;\r\n      path += `Q${x} ${y} ${x} ${ymcr}`;\r\n    } else {\r\n      path += `L${x} ${y} `;\r\n    }\r\n    return path;\r\n  }\r\n\r\n  private getUniqId() {\r\n    return String(this.lastUniqId++);\r\n  }\r\n\r\n  private generatePaths() {\r\n    const {\r\n      pointSize,\r\n      options: { roundOuterCorners, roundInnerCorners, cornerBlocksAsCircles },\r\n    } = this;\r\n\r\n    const { lines } = this;\r\n    const paths: string[] = [];\r\n\r\n    Object.keys(lines).forEach((key) => {\r\n      let path = '';\r\n      for (const [lineIdx, line] of [lines[key], ...(lines[key].crops as LineSegment[][])].entries()) {\r\n        for (const [segIdx, seg] of line.entries()) {\r\n          let {\r\n            p1: { x, y },\r\n            cr,\r\n          } = seg;\r\n\r\n          x = x * pointSize;\r\n          y = y * pointSize;\r\n\r\n          const xpcr = round(x + cr);\r\n          const ypcr = round(y + cr);\r\n\r\n          x = round(x);\r\n          y = round(y);\r\n\r\n          const prevSeg = line[segIdx - 1] || line[line.length - 1];\r\n          const nextSeg = line[segIdx + 1] || line[0];\r\n\r\n          const segDir = this.getDir(seg);\r\n          const prevSegDir = this.getDir(prevSeg);\r\n\r\n          if (segIdx === 0) {\r\n            if (roundOuterCorners) {\r\n              if (lineIdx === 0) {\r\n                path += `M${xpcr} ${y} `;\r\n              } else {\r\n                path += `M${x} ${ypcr} `;\r\n              }\r\n            } else {\r\n              path += `M${x} ${y} `;\r\n            }\r\n          } else if (segIdx === line.length - 1) {\r\n            path += this.getSubPath(seg, prevSeg, roundOuterCorners, roundInnerCorners);\r\n            path += this.getSubPath(nextSeg, seg, roundOuterCorners, roundInnerCorners);\r\n            path += 'Z';\r\n          } else if (prevSegDir !== segDir) {\r\n            path += this.getSubPath(seg, prevSeg, roundOuterCorners, roundInnerCorners);\r\n          }\r\n        }\r\n      }\r\n      paths.push(`<path d=\"${path}\"/>`);\r\n    });\r\n\r\n    if (cornerBlocksAsCircles) {\r\n      const offsetSize = this.pointSize * this.matrixSize - this.pointSize * 7;\r\n      [\r\n        [0, 0],\r\n        [offsetSize, 0],\r\n        [0, offsetSize],\r\n      ].forEach(([ox, oy]) => {\r\n        const centerX = round((this.pointSize * 7) / 2 + ox);\r\n        const centerY = round((this.pointSize * 7) / 2 + oy);\r\n\r\n        let outerRadius = round((this.pointSize * 7) / 2);\r\n        const innerRadius = round((this.pointSize * 7) / 2 - this.pointSize);\r\n\r\n        // Big circle\r\n        paths.push(`<path d=\"\\\r\nM ${centerX} ${centerY - outerRadius} \\\r\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY + outerRadius)} \\\r\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY - outerRadius)} \\\r\nZ \\\r\nM ${centerX} ${centerY - innerRadius} \\\r\nA ${innerRadius} ${innerRadius} 0 1 1 ${centerX} ${round(centerY + innerRadius)} \\\r\nA ${innerRadius} ${innerRadius} 0 1 1 ${centerX} ${round(centerY - innerRadius)} \\\r\nZ\" />`);\r\n\r\n        // Small circle\r\n        outerRadius = round((this.pointSize * 7) / 2 - this.pointSize * 2);\r\n        paths.push(`<path d=\"\\\r\nM ${centerX} ${centerY - outerRadius} \\\r\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY + outerRadius)} \\\r\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY - outerRadius)} \\\r\nZ\" />`);\r\n      });\r\n    }\r\n\r\n    this.paths = paths;\r\n  }\r\n\r\n  private svgAdditionalContent(additionalContent): string {\r\n    if (typeof additionalContent === 'function') {\r\n      return additionalContent(this);\r\n    }\r\n\r\n    if (typeof additionalContent === 'string') {\r\n      return additionalContent;\r\n    }\r\n\r\n    return additionalContent || '';\r\n  }\r\n\r\n  get svg() {\r\n    const { size, fill } = this.options;\r\n\r\n    return `\\\r\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${size} ${size}\" width=\"${size}\" height=\"${size}\" fill=\"${fill}\">\r\n${this.svgAdditionalContent(this.options.preContent)}\r\n${this.paths.join('\\n')}\r\n${this.svgAdditionalContent(this.options.postContent)}\r\n</svg>`;\r\n  }\r\n}\r\n"],"names":["QR8bitByte","constructor","data","mode","parsedData","this","i","l","length","code","charCodeAt","byteArray","push","Array","prototype","concat","apply","unshift","getLength","write","buffer","put","QRErrorCorrectLevel","L","M","Q","H","QRRSBlock","totalCount","dataCount","static","typeNumber","errorCorrectLevel","rsBlock","getRsBlockTable","undefined","Error","list","count","j","RS_BLOCK_TABLE","QRBitBuffer","get","index","bufIndex","Math","floor","num","putBit","getLengthInBits","bit","EXP_TABLE","LOG_TABLE","glog","n","gexp","QRPolynomial","shift","offset","multiply","e","QRMath","mod","ratio","PATTERN_POSITION_TABLE","getBCHDigit","digit","getMask","maskPattern","getErrorCorrectPolynomial","errorCorrectLength","a","type","getLostPoint","qrCode","moduleCount","getModuleCount","lostPoint","row","col","sameCount","dark","isDark","r","c","darkCount","abs","QRCodeModel","modules","dataCache","dataList","addData","newData","make","makeImpl","getBestMaskPattern","test","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","minLostPoint","pattern","QRUtil","createMovieClip","target_mc","instance_name","depth","qr_mc","createEmptyMovieClip","y","x","beginFill","moveTo","lineTo","endFill","pos","bits","d","inc","bitIndex","byteIndex","rsBlocks","getRSBlocks","totalDataCount","createBytes","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","ecCount","max","rsPoly","modPoly","modIndex","totalCodeCount","QRCodeLimitLength","getProp","object","keys","defaultVal","isArray","split","slice","round","val","precision","neighborOffsets","contour","QRCode","options","ecl","content","qrcode","getTypeNumber","getErrorCorrectLevel","result","encodeURI","toString","replace","getUTF8Length","limit","len","table","emptyCenter","emptySize","emptySizeHeight","size","halfSize","halfEmptySize","halfEmptySizeHeight","matrix","findNeighbors","cell","pride","expectCells","neighborCoord","find","neighborCell","QRSvg","radiusFactor","roundOuterCorners","roundInnerCorners","cornerBlocksAsCircles","fill","paths","matrixSize","lines","lastUniqId","pointSize","cornerBlockRadiusFactor","forEach","rowIdx","idx","blockId","isCornerBlock","detectBlocks","detectLines","generatePaths","currCell","cells","getUniqId","pathRadius","min","cornerBlockPathRadius","processed","p1","p2","cr","Object","key","line","proc","py","px","oCell","nextSeg","filter","seg","sort","b","resultSeg","crops","checkCrops","notProcessedSeg","cropResult","reverse","map","op2","getDir","getSubPath","prevSeg","xmcr","xpcr","ymcr","ypcr","segDir","prevSegDir","path","String","lineIdx","entries","segIdx","offsetSize","ox","oy","centerX","centerY","outerRadius","innerRadius","svgAdditionalContent","additionalContent","svg","preContent","join","postContent"],"mappings":"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ACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KACvB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,KACV,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,IAAK,IAAK,EAA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"}